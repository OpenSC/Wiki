h1. OpenSC Release Howto

Releasing OpenSC should be simple and streamlined, yet a predictable and easily repeatable process. This page describes releasing OpenSC from Git.

h2. Generic Principles

* At least one (or more, if needed) pre-releases must be done before the actual release.
* After a release candidate has been published, no more merges to the master branch should happen, only release-critical single commits can be cherry-picked and a new release candidate created.
* Normal development should continue when the final release is done.

h2. Preparing Security Relevant Changes

* Request a CVE in case of security relevant fixes or changes.
** Use Red Hat product security at secalert@redhat.com describing the CVE and ask for CVE allocation. Do NOT use mitre directly as their response times are terrible.
** Filter OSS-Fuzz for "security relevant issues":https://oss-fuzz.com/testcases?open=no&security=yes that were fixed for this release
** Filter Coverity scan for *High* impact issues that were fixed for this release
* Update the "security advisories":https://github.com/OpenSC/OpenSC/wiki/OpenSC-security-advisories
* Mention CVE ID in the _NEWS_ file

h2. Release Preparations

h3. On Github:

* Add a upcoming release to wiki page "Smart Card Release Testing":https://github.com/OpenSC/OpenSC/wiki/Smart-Card-Release-Testing
* Create a tracking issue with proposed changelog for _NEWS_, for example "Towards new release 0.22.0":https://github.com/OpenSC/OpenSC/issues/2247

h3. In Version Control (git):

Release (or RC) version must be changed in the following files:
* _NEWS_ (Markdown): Make sure to fix the release date for final release!
* _configure.ac_ : change package version major/minor/fix as needed, RCs get the package suffix `-rc`, which is removed for the final release
* _configure.ac_ : Update the "LT version number":https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html, which is required with changes to, for example, _opensc.h_ and _libopensc.exports_.
* _.appveyor.yml_: Update the version on first line
* _README.md_: Update the links to the new release and binaries

Optionally, discuss changes to _NEWS_ by opening a "new issue":https://github.com/OpenSC/OpenSC/issues/new with your suggestions.

h2. Build and Test Binaries
# Create release tag
** _Annotated_ tag for final release, _lightweight_ tag for release candidate
*** Locally with git
<pre><code>  git tag -a 0.20.0
  git push origin 0.20.0</code></pre>
*** Via GitHub when creating release
**** Github will automatically create _*-rcX_ as lightweight tag
** For final releases, select the existing tag, e.g. _0.20.0_; for release candidates choose a new tag, e.g. _0.20.0-rc1_
# Prepare build artifacts
** Wait around 50 minutes (after pushing the tag) to allow build artifacts be placed into the "nightly builds":https://github.com/OpenSC/Nightly
** All builds must succeed and must not generate more warnings than the previous build.
** Copy build artifacts selecting the correct branch using the hash of the release commit, e.g.:
<pre><code>  git clone https://github.com/OpenSC/OpenSC --single-branch
  cd OpenSC
  BRANCH=`git log --max-count=1 --date=short --abbrev=8 --pretty=format:"%cd_%h"`
  wget https://github.com/OpenSC/Nightly/archive/${BRANCH}.zip
  unzip ${BRANCH}.zip </code></pre>
** Do a separate smoke test for all installers and the tarball, "document your results in the Wiki":https://github.com/OpenSC/OpenSC/wiki/Smart-Card-Release-Testing.
# Create a "new (draft) release":https://github.com/OpenSC/OpenSC/releases
** Describe the release including all changes to NEWS (Markdown)
** Select appropriate tag (when pushed before) or create new one
** Upload the build artifacts to the new release
*** release tarball, OSX installer, 2 variants (default, light) of Windows intaller for both 64b and 32b + separate debug archives
*** For final releases, download signed Windows installers from Signpath.io instead of unsigned installers from AppVeyor (i.e. Nightly builds) 
#### Navigate to "Signpath's outstanding Signing Requests":https://app.signpath.io/Web/8d2463fe-39bd-4a41-bb72-f008b4b1fe17/SigningRequests 
#### Select the ones that were issued with the creation of the release branch
#### Check the signing request's Build data URL to match the related AppVeyor build that was triggered with creation of the release branch
#### Approve signing and wait for completion of the signing process
#### Download signed artifact from Signpath.io
#### Upload signed artifact to Github Release
** Check:
*** _This is a pre-release_ if only creating a release candidate
*** _Set as latest release_ if creating final release

h2. Announcement

* Write announcement, short human readable version
** Short overview of OpenSC
** Important and visible (breaking) changes in this release (not a copy of _NEWS_ file)
** URL-s for downloads
** Pointers to full verbose information (list of commits, full changelog, closed bugs)
** SHA-256 hashes of release artifacts
** Plans for next release
* Find someone to proofread the announcement.
* Via mail publish the announcment on "opensc-announce@lists.sourceforge.net":https://sourceforge.net/p/opensc/mailman/opensc-announce/ and "opensc-devel@lists.sourceforge.net":https://sourceforge.net/p/opensc/mailman/opensc-devel/ lists.
* In case of security relevant changes, forward the announcement to "oss-security@lists.openwall.com":https://www.openwall.com/lists/oss-security/
* Update the "Main Wiki page":https://github.com/OpenSC/OpenSC/wiki with links to new release

h2. Clean up old nightly builds repository

* The repository https://github.com/OpenSC/Nightly is used to hold nightly builds for both MacOS and Windows.
* They are pushed on every master commit so the old builds need to be cleaned up regularly.
* Ideally after the new release is done, any old branch before last release can be removed through the github web UI on https://github.com/OpenSC/Nightly/branches/stale.
* For more info, see the https://github.com/OpenSC/Nightly/issues/1
